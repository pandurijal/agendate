{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["localizer","BigCalendar","momentLocalizer","moment","App","state","events","id","title","email","start","Date","end","timeStart","timeEnd","modalAddEvent","modalViewEvent","selectedDate","selectedEvent","eventStyleGetter","style","backgroundColor","randomColor","luminosity","handleSelect","_ref","_this","setState","openModalAddEvent","handleView","idEvent","openModalViewEvent","submitAddEvent","e","preventDefault","event","Math","random","target","elements","value","concat","timeStartH","timeStartM","timeEndH","timeEndM","Object","toConsumableArray","closeModalAddEvent","localStorage","setItem","JSON","stringify","deleteEvent","filter","closeModalViewEvent","_this2","this","react_default","a","createElement","className","lib_default","selectable","defaultView","Views","MONTH","defaultDate","scrollToTime","onSelectEvent","onSelectSlot","eventPropGetter","index_es","center","open","onClose","toDateString","onSubmit","type","name","placeholder","max","map","key","onClick","getItem","console","log","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fe4e96af.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport BigCalendar from \"react-big-calendar\";\nimport Modal from \"react-responsive-modal\";\nimport moment from \"moment\";\nimport TimePicker from \"react-time-picker\";\nimport randomColor from \"randomcolor\";\n\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\nimport \"./App.css\";\n\nconst localizer = BigCalendar.momentLocalizer(moment);\n\nclass App extends Component {\n  state = {\n    events: [\n      {\n        id: 0,\n        title: \"Event\",\n        email: \"rara@gmail.com\",\n        start: new Date(2019, 3, 20),\n        end: new Date(2019, 3, 20),\n        timeStart: \"10:00\",\n        timeEnd: \"11:00\"\n      },\n      {\n        id: 1,\n        title: \"All Day Event very long title\",\n        email: \"rara@gmail.com\",\n        start: new Date(2019, 3, 20),\n        end: new Date(2019, 3, 20),\n        timeStart: \"10:00\",\n        timeEnd: \"11:00\"\n      }\n    ],\n    modalAddEvent: false,\n    modalViewEvent: false,\n    selectedDate: new Date(),\n    selectedEvent: null\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"calendar-container\">\n          <BigCalendar\n            selectable\n            localizer={localizer}\n            events={this.state.events}\n            defaultView={BigCalendar.Views.MONTH}\n            defaultDate={new Date(2019, 3, 12)}\n            scrollToTime={new Date(1970, 1, 1, 6)}\n            onSelectEvent={e => this.handleView(e.id)}\n            onSelectSlot={this.handleSelect}\n            eventPropGetter={this.eventStyleGetter}\n          />\n        </div>\n        <Modal\n          center\n          open={this.state.modalAddEvent}\n          onClose={this.closeModalAddEvent}\n        >\n          <h2>{this.state.selectedDate.toDateString()}</h2>\n          <form onSubmit={this.submitAddEvent} className=\"add-event\">\n            <div className=\"form-wrapper\">\n              <label>Title Event:</label>\n              <input\n                type=\"text\"\n                name=\"title\"\n                placeholder=\"event name\"\n                className=\"input\"\n              />\n            </div>\n            <div className=\"form-wrapper\">\n              <label>Time Start:</label>\n              <div className=\"input\">\n                <input type=\"number\" max=\"23\" name=\"timeStartH\" /> :{\" \"}\n                <input type=\"number\" max=\"59\" name=\"timeStartM\" />\n              </div>\n            </div>\n            <div className=\"form-wrapper\">\n              <label>Time End:</label>\n              <div className=\"input\">\n                <input type=\"number\" max=\"23\" name=\"timeEndH\" /> :{\" \"}\n                <input type=\"number\" max=\"59\" name=\"timeEndM\" />\n              </div>\n            </div>\n            <div className=\"form-wrapper\">\n              <label>Email Invitees:</label>\n              <input\n                type=\"text\"\n                name=\"email\"\n                placeholder=\"invitee email\"\n                className=\"input\"\n              />\n            </div>\n            <button>Submit</button>\n          </form>\n        </Modal>\n        <Modal\n          center\n          open={this.state.modalViewEvent}\n          onClose={this.closeModalViewEvent}\n        >\n          {/* {console.log(this.state.events[this.state.selectedEvent][\"email\"])} */}\n          {this.state.events.map(e => {\n            if (this.state.selectedEvent === e.id) {\n              return (\n                <div key={e.id}>\n                  <h2>{e.title}</h2>\n                  <p>{e.start.toDateString()}</p>\n                  <p>\n                    {e.timeStart} - {e.timeEnd}\n                  </p>\n                  <p>{e.email}</p>\n                  <button\n                    onClick={() => {\n                      this.deleteEvent(e.id);\n                    }}\n                  >\n                    Delete\n                  </button>\n                </div>\n              );\n            }\n          })}\n        </Modal>\n      </div>\n    );\n  }\n\n  componentDidMount() {\n    const events = localStorage.getItem(\"events\");\n    console.log(\"get\", events);\n  }\n\n  eventStyleGetter = () => {\n    const backgroundColor = randomColor({ luminosity: \"dark\" });\n    const style = {\n      backgroundColor: backgroundColor\n    };\n    return {\n      style: style\n    };\n  };\n\n  handleSelect = ({ start }) => {\n    this.setState({ selectedDate: start }, this.openModalAddEvent);\n    // if (title)\n    //   this.setState({\n    //     events: [\n    //       ...this.state.events,\n    //       {\n    //         start,\n    //         end,\n    //         title\n    //       }\n    //     ]\n    //   });\n  };\n\n  handleView = idEvent => {\n    this.setState({ selectedEvent: idEvent }, this.openModalViewEvent);\n  };\n\n  submitAddEvent = e => {\n    e.preventDefault();\n    let event = [];\n    event.id = Math.random();\n    event.title = e.target.elements.title.value;\n    event.email = e.target.elements.email.value;\n    event.start = this.state.selectedDate;\n    event.end = this.state.selectedDate;\n    event.timeStart = `${e.target.elements.timeStartH.value}:${\n      e.target.elements.timeStartM.value\n    }`;\n    event.timeEnd = `${e.target.elements.timeEndH.value}:${\n      e.target.elements.timeEndM.value\n    }`;\n    let events = [...this.state.events, event];\n    this.setState({ events }, this.closeModalAddEvent);\n    localStorage.setItem(\"events\", JSON.stringify(events));\n  };\n\n  deleteEvent = idEvent => {\n    const events = this.state.events.filter(e => e.id !== idEvent);\n    this.setState({ events }, this.closeModalViewEvent);\n  };\n\n  openModalAddEvent = () => {\n    this.setState({ modalAddEvent: true });\n  };\n\n  closeModalAddEvent = () => {\n    this.setState({ modalAddEvent: false });\n  };\n\n  openModalViewEvent = () => {\n    this.setState({ modalViewEvent: true });\n  };\n\n  closeModalViewEvent = () => {\n    this.setState({ modalViewEvent: false });\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}